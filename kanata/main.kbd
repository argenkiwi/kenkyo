;; The proposed main layer implements one of the variants of home row modifers:
;; - We white-list the core keys of the layout to ensure they are evaluated by the `key-timing` logic.
;; - `switch` checks if the `key-timing` of the 3rd most recent key is less than a quarter of a second and, if so, skips the modifier evaluation.
;; - 3 represents the `key-recency` and should equal the maximum number of modifiers to be held simultaneously (accounting for chords).
;; - 250 represents the elapsed `time` since the key specified above was pressed and it should be adjusted to your typing speed.
;; - `tap-hold-release-timeout` triggers a modifier while held only if another key is pressed *and* released before the timeout, after which the expected repeat action for the key would trigger instead.
(defcfg
  process-unmapped-keys no
)

(defsrc
       q w e r t y u i o p
  caps a s d f g h j k l ; '
       z x c v b n m , . /
               spc
)

(deftemplate charmod (char mod)
  (switch 
    ((key-timing 3 less-than 250)) $char break
    () (tap-hold-release-timeout 200 500 $char $mod $char) break
  )
)

(defchords mtl 500
  (w  ) w
  (  e) e
  (w e) esc
)

(defchords mtr 500
  (i  ) i
  (  o) o
  (i o) bspc
)

(defchords mbl 500
  (x  ) x
  (  c) c
  (x c) tab
)

(defchords mbr 500
  (,  ) ,
  (  .) .
  (, .) ret
)

(deflayermap (main)
  w (chord mtl w)
  e (chord mtl e)
  i (chord mtr i)
  o (chord mtr o)
  a (t! charmod a lmet)
  s (t! charmod s lalt)
  d (t! charmod d lsft)
  f (t! charmod f lctl)
  j (t! charmod j rctl)
  k (t! charmod k rsft)
  l (t! charmod l lalt)
  ; (t! charmod ; rmet)
  x (chord mbl x)
  c (chord mbl c)
  v (t! charmod v ralt)
  m (t! charmod m ralt)
  , (chord mbr ,)
  . (chord mbr .)
)
